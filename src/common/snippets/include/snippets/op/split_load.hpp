// Copyright (C) 2022 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#pragma once

#include <ngraph/op/op.hpp>
#include <ngraph/opsets/opset1.hpp>
#include "load.hpp"

namespace ngraph {
namespace snippets {
namespace op {

/**
 * @interface SplitScalarLoad
 * @brief Generated by Canonicalization for a scalar value load to vector register
 * @ingroup snippets
 */
class SplitLoad : public ngraph::opset1::Split {
public:
    OPENVINO_OP("SplitLoad", "SnippetsOpset", ngraph::snippets::op::Load);

    SplitLoad(const Output<Node>& data, const Output<Node>& axis, const size_t num_splits);
    SplitLoad() = default;

//    SplitScalarLoad(const Output<Node>& load, const Output<Node>& axis, const size_t num_splits);
//    SplitScalarLoad() = default;
//
//    std::shared_ptr<Node> clone_with_new_inputs(const OutputVector& new_args) const override {
//        check_new_args_count(this, new_args);
//        return std::make_shared<SplitScalarLoad>(new_args.at(0), new_args.at(1), m_num_splits);
//    }
//
//    void validate_and_infer_types() override;

//private:
//    size_t m_num_splits;
};

} // namespace op
} // namespace snippets
} // namespace ngraph